// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// hamming_filter_wrapper
void hamming_filter_wrapper(StringVector barcodes, std::string& read, const int threshold);
RcppExport SEXP _BarcodeMatcher_hamming_filter_wrapper(SEXP barcodesSEXP, SEXP readSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type barcodes(barcodesSEXP);
    Rcpp::traits::input_parameter< std::string& >::type read(readSEXP);
    Rcpp::traits::input_parameter< const int >::type threshold(thresholdSEXP);
    hamming_filter_wrapper(barcodes, read, threshold);
    return R_NilValue;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _BarcodeMatcher_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BarcodeMatcher_hamming_filter_wrapper", (DL_FUNC) &_BarcodeMatcher_hamming_filter_wrapper, 3},
    {"_BarcodeMatcher_timesTwo", (DL_FUNC) &_BarcodeMatcher_timesTwo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BarcodeMatcher(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
